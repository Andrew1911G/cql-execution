# InAgeDemographic
parameter MeasurementPeriod default interval[Date(2013, 1, 1), Date(2014, 1, 1))

context PATIENT

define InDemographic =
    AgeAt(start of MeasurementPeriod) >= 2 and AgeAt(start of MeasurementPeriod) < 18

# ExpressionDef
context PATIENT
define Foo = 'Bar'

# ExpressionRef
define Life = 42
define Foo = Life

# ParameterDef
parameter MeasureYear default 2012

# ParameterRef
parameter FooP default 'Bar'
define Foo = FooP

# ValueSetDef
valueset "One Arg" = ValueSet('2.16.840.1.113883.3.464.1003.102.12.1011')
valueset "Two Arg" = ValueSet('2.16.840.1.113883.3.464.1003.102.12.1011', '20140501')
valueset "Three Arg" = ValueSet('2.16.840.1.113883.3.464.1003.102.12.1011', '20140501', 'National Committee for Quality Assurance')

# ValueSetRef
valueset "Acute Pharyngitis" = ValueSet('2.16.840.1.113883.3.464.1003.101.12.1001')
define Foo = "Acute Pharyngitis"

# And
define AllTrue = true and true
define AllFalse = false and false
define SomeTrue = true and false

# AgeAtFunctionRef
define AgeAt2012 = AgeAt(Date(2012))
define AgeAt19810216 = AgeAt(Date(1981, 2, 16))
define AgeAt1975 = AgeAt(Date(1975))

# DateFunctionRef
define Year = Date(2012)
define Month = Date(2012, 4)
define Day = Date(2012, 4, 15)
define Hour = Date(2012, 4, 15, 12)
define Minute = Date(2012, 4, 15, 12, 10)
define Second = Date(2012, 4, 15, 12, 10, 59)

# Interval
define Foo = interval[1, 4]

# Greater
define AGtB_Int = 5 > 4
define AEqB_Int = 5 > 5
define ALtB_Int = 5 > 6

# GreaterOrEqual
define AGtB_Int = 5 >= 4
define AEqB_Int = 5 >= 5
define ALtB_Int = 5 >= 6

# Equal
define AGtB_Int = 5 = 4
define AEqB_Int = 5 = 5
define ALtB_Int = 5 = 6

# LessOrEqual
define AGtB_Int = 5 <= 4
define AEqB_Int = 5 <= 5
define ALtB_Int = 5 <= 6

# Less
define AGtB_Int = 5 < 4
define AEqB_Int = 5 < 5
define ALtB_Int = 5 < 6

# List
define three = 1 + 2
define IntList = { 9, 7, 8 }
define StringList = { 'a', 'bee', 'see' }
define mixedList = { 1, 'two', three }

# Interval
define Open = interval(Date(2012, 1, 1), Date(2013, 1, 1))
define LeftOpen = interval(Date(2012, 1, 1), Date(2013, 1, 1)]
define RightOpen = interval[Date(2012, 1, 1), Date(2013, 1, 1))
define Closed = interval[Date(2012, 1, 1), Date(2013, 1, 1)]

# Begin
define Foo = start of interval[Date(2012, 1, 1), Date(2013, 1, 1)]

# InList
define IsIn = 4 in { 3, 4, 5 }
define IsNotIn = 4 in { 3, 5, 6 }

# InValueSet
valueset "Female" = ValueSet('2.16.840.1.113883.3.560.100.2')
valueset "Versioned Female" = ValueSet('2.16.840.1.113883.3.560.100.2', '20121025')
define String = 'F' in "Female"
define StringInVersionedValueSet = 'F' in "Versioned Female"
define ShortCode = Code('F') in "Female"
define MediumCode = Code('F', '2.16.840.1.113883.18.2') in "Female"
define LongCode = Code('F', '2.16.840.1.113883.18.2', 'HL7V2.5') in "Female"
define WrongString = 'M' in "Female"
define WrongStringInVersionedValueSet = 'M' in "Versioned Female"
define WrongShortCode = Code('M') in "Female"
define WrongMediumCode = Code('F', '3.16.840.1.113883.18.2') in "Female"
define WrongLongCode = Code('F', '2.16.840.1.113883.18.2', 'HL7V2.6') in "Female"

# InValueSetFunction
valueset "Female" = ValueSet('2.16.840.1.113883.3.560.100.2')
valueset "Versioned Female" = ValueSet('2.16.840.1.113883.3.560.100.2', '20121025')
define String = InValueSet('F', '2.16.840.1.113883.3.560.100.2')
define StringInVersionedValueSet = InValueSet('F', '2.16.840.1.113883.3.560.100.2', '20121025')
define ShortCode = InValueSet(Code('F'), '2.16.840.1.113883.3.560.100.2')
define MediumCode = InValueSet(Code('F', '2.16.840.1.113883.18.2'), '2.16.840.1.113883.3.560.100.2')
define LongCode = InValueSet(Code('F', '2.16.840.1.113883.18.2', 'HL7V2.5'), '2.16.840.1.113883.3.560.100.2')
define WrongString = InValueSet('M', '2.16.840.1.113883.3.560.100.2')
define WrongStringInVersionedValueSet = InValueSet('M', '2.16.840.1.113883.3.560.100.2', '20121025')
define WrongShortCode = InValueSet(Code('M'), '2.16.840.1.113883.3.560.100.2')
define WrongMediumCode = InValueSet(Code('F', '3.16.840.1.113883.18.2'), '2.16.840.1.113883.3.560.100.2')
define WrongLongCode = InValueSet(Code('F', '2.16.840.1.113883.18.2', 'HL7V2.6'), '2.16.840.1.113883.3.560.100.2')

# PatientPropertyInValueSet
valueset "Female" = ValueSet('2.16.840.1.113883.3.560.100.2')
define IsFemale = gender in "Female Administrative Sex"

# Add
define Ten = 10
define Eleven = 11
define OnePlusTwo = 1 + 2
define AddMultiple = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10
define AddVariables = Ten + Eleven

# Literal
define BoolTrue = true
define BoolFalse = false
define IntOne = 1
define StringTrue = 'true'

# ClinicalRequest
valueset "Acute Pharyngitis" = ValueSet('2.16.840.1.113883.3.464.1003.102.12.1011')
valueset "Ambulatory/ED Visit" = ValueSet('2.16.840.1.113883.3.464.1003.101.12.1061')
valueset "Annual Wellness Visit" = ValueSet('2.16.840.1.113883.3.526.3.1240')
define Conditions = [Condition]
define Encounters = [Encounter, Performance]
define PharyngitisConditions = [Condition: "Acute Pharyngitis"]
define AmbulatoryEncounters = [Encounter, Performance: "Ambulatory/ED Visit"]
define EncountersByServiceType = [Encounter, Performance: serviceType in "Annual Wellness Visit"]
define WrongDataType = [Encounter, Proposal: "Ambulatory/ED Visit"]
define WrongValueSet = [Condition: "Ambulatory/ED Visit"]
define WrongCodeProperty = [Encounter, Performance: class in "Annual Wellness Visit"]

# DateRangeOptimizedQuery
parameter MeasurementPeriod default interval[Date(2013, 1, 1), Date(2014, 1, 1))
valueset "Ambulatory/ED Visit" = ValueSet('2.16.840.1.113883.3.464.1003.101.12.1061')
define EncountersDuringMP = [Encounter, Performance] E where E.performanceTime during MeasurementPeriod
define AmbulatoryEncountersDuringMP = [Encounter, Performance: "Ambulatory/ED Visit"] E where E.performanceTime during MeasurementPeriod

#ScratchPad
define Foo = "foo"
